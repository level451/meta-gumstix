From 4163adc6d42789bde12393e6449b6628791e2e42 Mon Sep 17 00:00:00 2001
From: "Andrew C. Smith" <acsmith@gumstix.com>
Date: Fri, 2 Mar 2018 15:19:41 -0500
Subject: [PATCH] Add support for the OSD OSD055A 5.5" MIPI DSI AMOLED panel

---
 .../bindings/display/panel/osd,osd055a.txt         |  26 ++
 drivers/gpu/drm/panel/Kconfig                      |   8 +
 drivers/gpu/drm/panel/Makefile                     |   1 +
 drivers/gpu/drm/panel/panel-osd-osd055a.c          | 360 +++++++++++++++++++++
 4 files changed, 395 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/display/panel/osd,osd055a.txt
 create mode 100644 drivers/gpu/drm/panel/panel-osd-osd055a.c

diff --git a/Documentation/devicetree/bindings/display/panel/osd,osd055a.txt b/Documentation/devicetree/bindings/display/panel/osd,osd055a.txt
new file mode 100644
index 0000000..d492e49
--- /dev/null
+++ b/Documentation/devicetree/bindings/display/panel/osd,osd055a.txt
@@ -0,0 +1,26 @@
+OSD OSD055A 5.5" 720p MIPI-DSI AMOLED panel
+
+The OSD Devices OSD055A is a 5.5" 720x1280 AMOLED
+panel connected using a MIPI-DSI video interface.
+
+Required properties:
+   - compatible: "raydium,rm68200"
+   - reg: the virtual channel number of a DSI peripheral
+
+Optional properties:
+   - reset-gpios: a GPIO spec for the reset pin (active low).
+   - power-supply: phandle of the regulator that provides the supply voltage.
+   - backlight: phandle of the backlight device attached to the panel.
+
+Example:
+
+&dsi {
+	...
+	panel@0 {
+		compatible = "raydium,rm68200";
+		reg = <0>;
+		reset-gpios = <&gpiof 15 GPIO_ACTIVE_LOW>;
+		power-supply = <&v1v8>;
+		backlight = <&pwm_backlight>;
+	};
+};
diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index 62aba97..2129514 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -81,4 +81,12 @@ config DRM_PANEL_SHARP_LS043T1LE01
 	  Say Y here if you want to enable support for Sharp LS043T1LE01 qHD
 	  (540x960) DSI panel as found on the Qualcomm APQ8074 Dragonboard
 
+config DRM_PANEL_OSD_OSD055A
+	tristate "OSD Displays OSD055A 720x1280 DSI 4dl video mode panel"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	help
+	  Say Y here if you want to enable support for OSD OSD055A
+	  720x1280 dsi 4dl video mode panel
+
 endmenu
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index a5c7ec0..ff4a5d6 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -6,3 +6,4 @@ obj-$(CONFIG_DRM_PANEL_SAMSUNG_LD9040) += panel-samsung-ld9040.o
 obj-$(CONFIG_DRM_PANEL_SAMSUNG_S6E8AA0) += panel-samsung-s6e8aa0.o
 obj-$(CONFIG_DRM_PANEL_SHARP_LQ101R1SX01) += panel-sharp-lq101r1sx01.o
 obj-$(CONFIG_DRM_PANEL_SHARP_LS043T1LE01) += panel-sharp-ls043t1le01.o
+obj-$(CONFIG_DRM_PANEL_OSD_OSD055A) += panel-osd-osd055a.o
diff --git a/drivers/gpu/drm/panel/panel-osd-osd055a.c b/drivers/gpu/drm/panel/panel-osd-osd055a.c
new file mode 100644
index 0000000..d3a564b
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-osd-osd055a.c
@@ -0,0 +1,360 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) STMicroelectronics SA 2017
+ * Copyright (C) Gumstix, Inc. 2018
+ *
+ * Authors: Philippe Cornu <philippe.cornu@st.com>
+ *          Yannick Fertre <yannick.fertre@st.com>
+ *          (Original source code of panel-raydium-rm68200.c)
+ * 
+ *          Andrew C. Smith <acsmith@gumstix.com>
+ */
+
+#include <drm/drmP.h>
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_panel.h>
+#include <linux/backlight.h>
+#include <linux/gpio/consumer.h>
+#include <linux/regulator/consumer.h>
+#include <video/mipi_display.h>
+
+#define DRV_NAME "osd_osd055a"
+
+struct osd055a {
+	struct device *dev;
+	struct drm_panel panel;
+	struct gpio_desc *reset_gpio;
+	struct regulator *supply;
+	struct backlight_device *bl_dev;
+	bool prepared;
+	bool enabled;
+};
+
+static const struct drm_display_mode default_mode = {
+	.clock = 52582,
+	.hdisplay = 720,
+	.hsync_start = 720 + 38,
+	.hsync_end = 720 + 38 + 8,
+	.htotal = 720 + 38 + 8 + 38,
+	.vdisplay = 1280,
+	.vsync_start = 1280 + 18,
+	.vsync_end = 1280 + 18 + 4,
+	.vtotal = 1280 + 18 + 4 + 18,
+	.vrefresh = 50,
+	.flags = 0,
+	.width_mm = 68,
+	.height_mm = 122,
+};
+
+static inline struct osd055a *panel_to_osd055a(struct drm_panel *panel)
+{
+	return container_of(panel, struct osd055a, panel);
+}
+
+static void osd055a_dcs_write_buf(struct osd055a *ctx, const void *data,
+				  size_t len)
+{
+	struct mipi_dsi_device *dsi = to_mipi_dsi_device(ctx->dev);
+
+	if (mipi_dsi_dcs_write_buffer(dsi, data, len) < 0)
+		DRM_WARN("mipi dsi dcs write buffer failed\n");
+}
+
+#define dcs_write_seq(ctx, seq...)				\
+({								\
+	static const u8 d[] = { seq };				\
+	osd055a_dcs_write_buf(ctx, d, ARRAY_SIZE(d));		\
+})
+
+static void osd055a_init_sequence(struct osd055a *ctx)
+{
+	// initialization as per the OSD documentation
+
+	dcs_write_seq(ctx, 0xF0, 0x55, 0xAA, 0x52, 0x08, 0x00);
+	dcs_write_seq(ctx, 0xC0, 0xC7, 0x0, 0x0, 0x0, 0x1E, 0x10, 0x60, 0xE5);
+	dcs_write_seq(ctx, 0xC1, 0xC0, 0x1, 0x0, 0x0, 0x1D, 0x0, 0xF0, 0xC8);
+	dcs_write_seq(ctx, 0xC2, 0xC0, 0x2, 0x0, 0x0, 0x1D, 0x2A, 0xA0, 0x9F);
+	dcs_write_seq(ctx, 0xC3, 0xC0, 0x2, 0x0, 0x0, 0x1E, 0x2A, 0xA0, 0x9F);
+	dcs_write_seq(ctx, 0xC4, 0xC0, 0x2, 0x0, 0x0, 0x1D, 0x10, 0x80, 0xB8);
+	dcs_write_seq(ctx, 0xC5, 0xC0, 0x2, 0x0, 0x0, 0x1E, 0x10, 0xA0, 0xB8);
+	dcs_write_seq(ctx, 0xC6, 0xC7, 0x0, 0x2, 0x0, 0x1E, 0x10, 0xA0, 0xEC);
+	dcs_write_seq(ctx, 0xC7, 0xC7, 0x0, 0x0, 0x0, 0x1F, 0x10, 0x60, 0xE5);
+	dcs_write_seq(ctx, 0xC8, 0xFF);
+	dcs_write_seq(ctx, 0xB0, 0x0, 0x8, 0xC, 0x14, 0x14);
+	dcs_write_seq(ctx, 0xBA, 0x20);
+	dcs_write_seq(ctx, 0xBB, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55);
+	dcs_write_seq(ctx, 0xF0, 0x55, 0xAA, 0x52, 0x8, 0x2);
+	//dcs_write_seq(ctx, 0xE1, 0x0); //14a
+	dcs_write_seq(ctx, 0xCA, 0x4);
+	dcs_write_seq(ctx, 0xE2, 0xA);
+	dcs_write_seq(ctx, 0xE3, 0x0);
+	dcs_write_seq(ctx, 0xE7, 0x0);
+	dcs_write_seq(ctx, 0xED, 0x48, 0x0, 0xE0, 0x13, 0x8, 0x0, 0x92, 0x8);
+	dcs_write_seq(ctx, 0xFD, 0x0, 0x8, 0x1C, 0x0, 0x0, 0x1);
+	dcs_write_seq(ctx, 0xC3, 0x11, 0x24, 0x4, 0xA, 0x1, 0x4, 0x0, 0x1C, 0x10, 0xF0, 0x0);
+	dcs_write_seq(ctx, 0xEA, 0x7F, 0x20, 0x0, 0x0, 0x0);
+	dcs_write_seq(ctx, 0xF0, 0x55, 0xAA, 0x52, 0x8, 0x1);
+	dcs_write_seq(ctx, 0xB0, 0x1, 0x1, 0x1);
+	dcs_write_seq(ctx, 0xB1, 0x5, 0x5, 0x5);
+	dcs_write_seq(ctx, 0xB2, 0xD0, 0xD0, 0xD0);
+	dcs_write_seq(ctx, 0xB4, 0x37, 0x37, 0x37);
+	dcs_write_seq(ctx, 0xB5, 0x5, 0x5, 0x5);
+	dcs_write_seq(ctx, 0xB6, 0x54, 0x54, 0x54);
+	dcs_write_seq(ctx, 0xB7, 0x24, 0x24, 0x24);
+	dcs_write_seq(ctx, 0xB8, 0x24, 0x24, 0x24);
+	dcs_write_seq(ctx, 0xB9, 0x14, 0x14, 0x14);
+	dcs_write_seq(ctx, 0xBA, 0x14, 0x14, 0x14);
+	dcs_write_seq(ctx, 0xBC, 0x0, 0xF8, 0xB2);
+	dcs_write_seq(ctx, 0xBE, 0x23, 0x0, 0x90);
+	dcs_write_seq(ctx, 0xCA, 0x80);
+	dcs_write_seq(ctx, 0xCB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
+	dcs_write_seq(ctx, 0xCC, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19);
+	dcs_write_seq(ctx, 0xF0, 0x55, 0xAA, 0x52, 0x8, 0x3);
+	dcs_write_seq(ctx, 0xF1, 0x10, 0x0, 0x0, 0x0, 0x1, 0x30);
+	dcs_write_seq(ctx, 0xF6, 0xA);
+	dcs_write_seq(ctx, 0xF0, 0x55, 0xAA, 0x52, 0x8, 0x5);
+	dcs_write_seq(ctx, 0xC0, 0x6, 0x2, 0x2, 0x22, 0x0, 0x0, 0x1);
+	dcs_write_seq(ctx, 0x35, 0x0);
+	dcs_write_seq(ctx, 0x36, 0x2); // flip horizontally
+	dcs_write_seq(ctx, 0x11);
+	dcs_write_seq(ctx, 0x29);
+}
+
+static int osd055a_disable(struct drm_panel *panel)
+{
+	struct osd055a *ctx = panel_to_osd055a(panel);
+
+	if (!ctx->enabled)
+		return 0;
+
+	if (ctx->bl_dev) {
+		ctx->bl_dev->props.power = FB_BLANK_POWERDOWN;
+		ctx->bl_dev->props.state |= BL_CORE_FBBLANK;
+		backlight_update_status(ctx->bl_dev);
+	}
+
+	ctx->enabled = false;
+
+	return 0;
+}
+
+static int osd055a_unprepare(struct drm_panel *panel)
+{
+	struct osd055a *ctx = panel_to_osd055a(panel);
+	struct mipi_dsi_device *dsi = to_mipi_dsi_device(ctx->dev);
+	int ret;
+
+	if (!ctx->prepared)
+		return 0;
+
+	ret = mipi_dsi_dcs_set_display_off(dsi);
+	if (ret)
+		DRM_WARN("failed to set display off: %d\n", ret);
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
+	if (ret)
+		DRM_WARN("failed to enter sleep mode: %d\n", ret);
+
+	msleep(120);
+
+	if (ctx->reset_gpio) {
+		gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+		msleep(20);
+	}
+
+	regulator_disable(ctx->supply);
+
+	ctx->prepared = false;
+
+	return 0;
+}
+
+static int osd055a_prepare(struct drm_panel *panel)
+{
+	struct osd055a *ctx = panel_to_osd055a(panel);
+	struct mipi_dsi_device *dsi = to_mipi_dsi_device(ctx->dev);
+	int ret;
+
+	if (ctx->prepared)
+		return 0;
+
+	ret = regulator_enable(ctx->supply);
+	if (ret < 0) {
+		DRM_ERROR("failed to enable supply: %d\n", ret);
+		return ret;
+	}
+
+	if (ctx->reset_gpio) {
+		gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+		gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+		msleep(20);
+		gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+		msleep(100);
+	}
+
+	osd055a_init_sequence(ctx);
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+	if (ret)
+		return ret;
+
+	msleep(125);
+
+	ret = mipi_dsi_dcs_set_display_on(dsi);
+	if (ret)
+		return ret;
+
+	msleep(20);
+
+	ctx->prepared = true;
+
+	return 0;
+}
+
+static int osd055a_enable(struct drm_panel *panel)
+{
+	struct osd055a *ctx = panel_to_osd055a(panel);
+
+	if (ctx->enabled)
+		return 0;
+
+	if (ctx->bl_dev) {
+		ctx->bl_dev->props.state &= ~BL_CORE_FBBLANK;
+		ctx->bl_dev->props.power = FB_BLANK_UNBLANK;
+		backlight_update_status(ctx->bl_dev);
+	}
+
+	ctx->enabled = true;
+
+	return 0;
+}
+
+static int osd055a_get_modes(struct drm_panel *panel)
+{
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(panel->drm, &default_mode);
+	if (!mode) {
+		DRM_ERROR("failed to add mode %ux%ux@%u\n",
+			  default_mode.hdisplay, default_mode.vdisplay,
+			  default_mode.vrefresh);
+		return -ENOMEM;
+	}
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	drm_mode_probed_add(panel->connector, mode);
+
+	panel->connector->display_info.width_mm = mode->width_mm;
+	panel->connector->display_info.height_mm = mode->height_mm;
+
+	return 1;
+}
+
+static const struct drm_panel_funcs osd055a_drm_funcs = {
+	.disable   = osd055a_disable,
+	.unprepare = osd055a_unprepare,
+	.prepare   = osd055a_prepare,
+	.enable    = osd055a_enable,
+	.get_modes = osd055a_get_modes,
+};
+
+static int osd055a_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct device_node *backlight;
+	struct osd055a *ctx;
+	int ret;
+
+	ctx = devm_kzalloc(dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx)
+		return -ENOMEM;
+
+	ctx->reset_gpio = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(ctx->reset_gpio)) {
+		dev_err(dev, "cannot get reset-gpio\n");
+		return PTR_ERR(ctx->reset_gpio);
+	}
+
+	ctx->supply = devm_regulator_get(dev, "power");
+	if (IS_ERR(ctx->supply)) {
+		dev_err(dev, "cannot get regulator\n");
+		return PTR_ERR(ctx->supply);
+	}
+
+	backlight = of_parse_phandle(dev->of_node, "backlight", 0);
+	if (backlight) {
+		ctx->bl_dev = of_find_backlight_by_node(backlight);
+		of_node_put(backlight);
+
+		if (!ctx->bl_dev)
+			return -EPROBE_DEFER;
+	}
+
+	mipi_dsi_set_drvdata(dsi, ctx);
+
+	ctx->dev = dev;
+
+	dsi->lanes = 4;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_BURST |
+			  MIPI_DSI_MODE_LPM;
+
+	drm_panel_init(&ctx->panel);
+	ctx->panel.dev = dev;
+	ctx->panel.funcs = &osd055a_drm_funcs;
+
+	drm_panel_add(&ctx->panel);
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0) {
+		dev_err(dev, "mipi_dsi_attach failed. Is host ready?\n");
+		drm_panel_remove(&ctx->panel);
+		if (ctx->bl_dev)
+			put_device(&ctx->bl_dev->dev);
+		return ret;
+	}
+
+	DRM_INFO(DRV_NAME "_panel %ux%u@%u %ubpp dsi %udl - ready\n",
+		 default_mode.hdisplay, default_mode.vdisplay,
+		 default_mode.vrefresh,
+		 mipi_dsi_pixel_format_to_bpp(dsi->format), dsi->lanes);
+
+	return 0;
+}
+
+static int osd055a_remove(struct mipi_dsi_device *dsi)
+{
+	struct osd055a *ctx = mipi_dsi_get_drvdata(dsi);
+
+	if (ctx->bl_dev)
+		put_device(&ctx->bl_dev->dev);
+
+	mipi_dsi_detach(dsi);
+	drm_panel_remove(&ctx->panel);
+
+	return 0;
+}
+
+static const struct of_device_id osd_osd055a_of_match[] = {
+	{ .compatible = "osd,osd055a" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, osd_osd055a_of_match);
+
+static struct mipi_dsi_driver osd_osd055a_driver = {
+	.probe  = osd055a_probe,
+	.remove = osd055a_remove,
+	.driver = {
+		.name = DRV_NAME "_panel",
+		.of_match_table = osd_osd055a_of_match,
+	},
+};
+module_mipi_dsi_driver(osd_osd055a_driver);
+
+MODULE_AUTHOR("Philippe Cornu <philippe.cornu@st.com>");
+MODULE_AUTHOR("Yannick Fertre <yannick.fertre@st.com>");
+MODULE_AUTHOR("Andrew C. Smith <acsmith@gumstix.com>");
+MODULE_DESCRIPTION("DRM Driver for OSD OSD055A MIPI DSI panel");
+MODULE_LICENSE("GPL v2");
-- 
2.7.4

